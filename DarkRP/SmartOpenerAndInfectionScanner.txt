@name VaultTecSmartInfectionOpener
@inputs [MemberListScreen InfectionPercentScreen]:wirelink
@persist AuthList:array
@persist DoorEntities:table DoorLookupArray:array CheckDiseasesUpdate
@persist Update InfectionCodeMax Distance OpenDoorDuration DoorAlpha UnwantedPlayer:entity PreviousPercent LastCheckedPlayer:entity
if(first()){
#----------------------------------------------Instructions-----------------------------------------
# Report any issues to: Turner605#6669

# Props can be added as both smart doors and infection scanners or just one type
# More than 10 players can be added but past 10 they will not show up

# Chat ommands (Note - commands do not include the brackets):
# Add player: !ap PLAYER
# Remove player: !rp PLAYER
# Add entity as door/scanner: !ad scanner door
# Add entity as door: !ad door
# Add entity as scanner: !ad scanner

#----------------------------------------------Coming soon-----------------------------------------
# Ability to show more than 10 players
# Notifcations when party members become infected
# Support for removed props
# Ability to change variables via chat commands
# Ability to add player you're looking at
# Ability to add whole party at once

#----------------------------------------------Reset All-----------------------------------------
function resetEverything(){
    
#---------------------------Change--------------------------
    Update = 0.3
    CheckDiseasesUpdate = 10
    Distance = 30
    DoorAlpha = 150
    OpenDoorDuration = 6 
    InfectionCodeMax = 7
    AdvertNewInfections = 0

#-------------------------Dont Touch------------------------
    PreviousPercent = 0
}

#----------------------------------------------Get Disease-----------------------------------------
function string getDisease(Code:number){
    switch (Code) {
        case 1, return "A Cold" break 
        case 2, return "Sars" break 
        case 3, return "COVID19" break 
        case 4, return "Eye Cancer" break 
        case 5, return "Ebola" break 
        case 6, return "An Explosive Headache" break 
        case 7, return "Fire Resistance" break 
        case 8, return "A Mobility Boost" break 
        case 9, return "Super Legs" break 
        case 10, return "Invinsibillity" break 
        default, return "VOID" break 
    }
}

#----------------------------------------------Doors-----------------------------------------

function number findDoor(Door:entity){
    EntIndex = DoorLookupArray:getIndex(Door)
    return EntIndex
}

function addDoor(Door:entity, SmartDoor:number, Scanner:number){
    IsValid = Door:isValid()
    IsOwnersProp = (Door:owner() == owner())
    IsInTable = findDoor(Door)>0
    IsScanner = Scanner>0
    IsSmartDoor = SmartDoor>0
    
    if(IsValid && !IsInTable && IsOwnersProp){
        DoorEntities:pushArray(array(Door, IsSmartDoor, IsScanner))
        DoorLookupArray:pushEntity(Door)
        hint("Door added successfully!",5)
    }
    
    if(IsInTable){hint("Entity is already a smart door.",5)}
    if(!IsOwnersProp){hint("Entity is not owned by you.",5)}
    if(!IsValid){hint("Entity is not valid.",5)} 
}

function removeDoor(Door:entity){    
    IsInTable = findDoor(Door)
    
    if(IsInTable){
        hint("Door removed successfully!",5)
        DoorEntities:removeArray(IsInTable)
        DoorLookupArray:removeEntity(IsInTable)
    }else{
        hint("Entity is not a smart door.",5)
    }
}

#----------------------------------------------Screen-----------------------------------------

function createTimerScreen(){
    BackgroundBlue = vec(0,0,40)
    ForegroundBlue = vec(0,100,180)
    White = vec(255,255,255)
    Black = vec(0,0,0)
    Grey = vec(80,80,80)
    
    InfectionPercentScreen:egpClear()
    InfectionPercentScreen:egpDrawTopLeft(1)
    
    InfectionPercentScreen:egpBox(1,vec2(0,0),vec2(512,512))
    InfectionPercentScreen:egpColor(1,BackgroundBlue)
                
    InfectionPercentScreen:egpCircle(2,vec2(256,300),vec2(93,93))
    InfectionPercentScreen:egpColor(2,Black)
    
    StartVal= 0
    InfectionPercentScreen:egpWedge(4,vec2(256,300),vec2(90,90))
    InfectionPercentScreen:egpColor(4,vec((100-StartVal)*2.55,StartVal*2.55,0))
    InfectionPercentScreen:egpAngle(4,90)
    InfectionPercentScreen:egpSize(4,-(StartVal*3.6))
    
    if (StartVal >= 100) {InfectionPercentScreen:egpSize(4,360)}
    if (StartVal < 1) {InfectionPercentScreen:egpSize(4,-0.1)}
    
    InfectionPercentScreen:egpCircle(5,vec2(256,300),vec2(76,76))
    InfectionPercentScreen:egpColor(5,Black)
    
    InfectionPercentScreen:egpWedge(6,vec2(256,300),vec2(72,72))
    InfectionPercentScreen:egpColor(6,White)
    InfectionPercentScreen:egpAngle(6,90)
    InfectionPercentScreen:egpSize(6,360)
    if (StartVal < 1) {InfectionPercentScreen:egpColor(6,Grey)}
    
    InfectionPercentScreen:egpCircle(7,vec2(256,300),vec2(64,64))
    InfectionPercentScreen:egpColor(7,Black)
        
    for (LineNum = 8,31) {
        InfectionPercentScreen:egpBox(LineNum,vec2(256,300),vec2(90,4))
        InfectionPercentScreen:egpColor(LineNum,Black)
        InfectionPercentScreen:egpAngle(LineNum,(LineNum-8)*15)
    }
    
    InfectionPercentScreen:egpText(100,"Infected Percent", vec2(30,20))
    InfectionPercentScreen:egpSize(100,60)

    InfectionPercentScreen:egpText(101,"0%", vec2(230, 275))
    InfectionPercentScreen:egpSize(101,45) 
}

#----------------------------------------------Update Users-----------------------------------------

function updateUsers(){
    MemberListScreen:egpText(8,"1) " + AuthList[1,entity]:name(),vec2(30,140))
    MemberListScreen:egpText(9,"2) " + AuthList[2,entity]:name(),vec2(30,170))
    MemberListScreen:egpText(10,"3) " + AuthList[3,entity]:name(),vec2(30,200))
    MemberListScreen:egpText(11,"4) " + AuthList[4,entity]:name(),vec2(30,230))
    MemberListScreen:egpText(12,"5) " + AuthList[5,entity]:name(),vec2(30,260))
    MemberListScreen:egpText(13,"6) " + AuthList[6,entity]:name(),vec2(30,290))
    MemberListScreen:egpText(14,"7) " + AuthList[7,entity]:name(),vec2(30,320))
    MemberListScreen:egpText(15,"8) " + AuthList[8,entity]:name(),vec2(30,350))
    MemberListScreen:egpText(16,"9) " + AuthList[9,entity]:name(),vec2(30,380))
    MemberListScreen:egpText(17,"10) " + AuthList[10,entity]:name(),vec2(30,410))
}

#----------------------------------------------Add Users Screen-----------------------------------------

function createScreen(){
    #----------------------------Colours---------------------------------------
    
    Black = vec(0,0,0)
    White = vec(255,255,255) 
    
    #----------------------------Screen---------------------------------------  
    
    MemberListScreen:egpClear()
    
    MemberListScreen:egpDrawTopLeft(1)
    MemberListScreen:egpBox(1,vec2(0,0),vec2(512,512))
    MemberListScreen:egpColor(1,Black)
    
    MemberListScreen:egpDrawTopLeft(2)
    MemberListScreen:egpBoxOutline(2,vec2(0,0),vec2(512,512))
    MemberListScreen:egpColor(2,Black)
    MemberListScreen:egpSize(2,10)
    
    MemberListScreen:egpDrawTopLeft(3)
    MemberListScreen:egpBox(3,vec2(10,10),vec2(492,120))
    MemberListScreen:egpColor(3,White)
    MemberListScreen:egpSize(3,30)
    
    MemberListScreen:egpDrawTopLeft(4)
    MemberListScreen:egpLine(4,vec2(10,130),vec2(502,130))
    MemberListScreen:egpColor(4,Black)
    MemberListScreen:egpSize(4,10)
    
    MemberListScreen:egpDrawTopLeft(5)
    MemberListScreen:egpTriangle(5,vec2(30,100),vec2(125,100),vec2(75,20))
    
    MemberListScreen:egpDrawTopLeft(6)
    MemberListScreen:egpText(6, "Members", vec2(142,40))
    MemberListScreen:egpColor(6,Black)
    MemberListScreen:egpSize(6,50)
    MemberListScreen:egpFont(6,"Trebuchet")
    
    MemberListScreen:egpDrawTopLeft(7)
    MemberListScreen:egpText(7,">",vec2(62,14))
    MemberListScreen:egpColor(7,Black)
    MemberListScreen:egpSize(7,96)
    
    MemberListScreen:egpText(28,"",vec2(80,430))
    MemberListScreen:egpText(29,"",vec2(70,450))
    MemberListScreen:egpText(30,"Commands: !ap !rp !ad !rd",vec2(30,455))
}

#----------------------------------------------First Spawned-----------------------------------------
}
if (first()|dupefinished()){
    runOnDisconnect(1)
    runOnChat(1)
    
    resetEverything()
    createScreen()
    timer("update",Update*1000)
    
    createTimerScreen()
    timer("CheckDiseasesUpdate", 1000) 
}

#----------------------------------------------Changed Events-----------------------------------------

if(changed(AuthList:count())){
    updateUsers()
}

if(changed(MemberListScreen)){
    createScreen() 
}

if(changed(InfectionPercentScreen)){
    createTimerScreen() 
}

if(changed(UnwantedPlayer) && UnwantedPlayer:isPlayer() && UnwantedPlayer != owner()){
    print(UnwantedPlayer:name() + " is at a door.")
}

#---------------------------------------------Chat Functions----------------------------------------

S = owner():lastSaid():lower():explode(" ")
AllS = owner():lastSaid():lower()

if(S[1,string]=="!ap" & chatClk(owner())){
    TP = findPlayerByName(S[2,string])
    InList = AuthList:getIndex(TP)
    
    if(TP:isPlayer() && !InList){
        hint("Player added successfully!",5)
        AuthList:pushEntity(TP)
    }
    
    if(InList){
        hint("Player already on list.",5)
    }
}

if(S[1,string]=="!rp"& chatClk(owner())){
    TP = findPlayerByName(S[2,string])
    if(TP:isPlayer()){
        for(Y = 1, AuthList:count()){
            if(TP == AuthList[Y,entity]){
                hint("Player removed successfully!",5)
                AuthList:remove(Y)
            }
        }
    }
}

if(S[1,string]=="!ad" & chatClk(owner())){
    SmartDoor = AllS:find("door")
    ScannerDoor = AllS:find("scanner")
    NewDoor = owner():aimEntity()
    
    if(SmartDoor || ScannerDoor){
        addDoor(NewDoor, SmartDoor, ScannerDoor)
    }else{
        hint("INVALID! Please state what kind of door you want.",5)
    }
}

if(S[1,string]=="!rd" & chatClk(owner())){
    NewDoor = owner():aimEntity()
    removeDoor(NewDoor)
}

#----------------------------------------------Check Players-----------------------------------------
if(first()){
function checkPlayers(){
    Players = players()
    PlayerCount = Players:count()
    InfectedPlayers = 0

    foreach(X, Player:entity = Players){
        InfectionCode = Player:virus():toNumber()

        LastCheckedPlayer = Player
        
        if(InfectionCode != -1 && InfectionCode < 7){
            InfectedPlayers++
        }
    }
    
    if(InfectedPlayers !=0){Percent = round((InfectedPlayers/PlayerCount)*100)}else{Percent=0}
    
    Message = InfectedPlayers + " Out Of " + PlayerCount + " infected"
    
    InfectionPercentScreen:egpText(102,Message, vec2(80,420))
    InfectionPercentScreen:egpSize(102,40)
    
    if((Percent != PreviousPercent) && AdvertNewInfections){
        if(Percent == 0){concmd("say /p There are currently no remaining infected")}   
        if(PreviousPercent == 0){concmd("say /p Someone has been infected with a new disease")}
        PreviousPercent = Percent
    }

    InfectionPercentScreen:egpColor(4,vec(Percent*2.55,(100-Percent)*2.55,0))
    InfectionPercentScreen:egpSize(4,-(Percent*3.6))
    
    if(Percent < 10){
        InfectionPercentScreen:egpText(101,Percent:toString()+"%", vec2(230, 275))
    }elseif(Percent < 100){
        InfectionPercentScreen:egpText(101,Percent:toString()+"%", vec2(220, 275))
    }else{
        InfectionPercentScreen:egpText(101,Percent:toString()+"%", vec2(200, 275))
    }
}
}
#---------------------------------------------Check For Players----------------------------------------

if(clk("update")) {
    for(I=1, DoorLookupArray:count()){
        DoorDataArray = DoorEntities[I,array]
        DoorEnt = DoorDataArray[1, entity]
        IsSmartDoor = DoorDataArray[2, number]
        IsScanner = DoorDataArray[3, number]

        InfectionCode = 0

        findIncludeClass("player")
        findInSphere(DoorEnt:massCenter(), Distance)
        Player = findClosest(DoorEnt:massCenter())

        if(Player:isPlayer()){
            if(IsSmartDoor){
                if(AuthList:getIndex(Player)){
                    DoorEnt:setAlpha(DoorAlpha)
                    DoorEnt:noCollideAll(1)
                    timer("DoorClose"+DoorEnt:id(), OpenDoorDuration*1000)
                }else{
                    UnwantedPlayer = Player
                }
            }
            
            if(IsScanner && Player != LastCheckedPlayer){
                InfectionCode = Player:virus():toNumber()
                LastCheckedPlayer = Player
                
                if(InfectionCode != -1 && InfectionCode < InfectionCodeMax){
                    DoorEnt:soundPlay(1,1,"ambient/alarms/klaxon1.wav")  
                    concmd("say /p WARNING: " + Player:name() + " is infected with " + getDisease(InfectionCode))
                }else{
                    DoorEnt:soundPlay(1,1,"tools/ifm/beep.wav")   
                }
            }
        }else{
            UnwantedPlayer == owner()
        }
    }

    timer("update", Update*1000)
}

for(K = 1, DoorEntities:count()) {
    DoorDataArray = DoorEntities[K,array]
    DoorEnt = DoorDataArray[1, entity]
        
    if(clk("DoorClose"+DoorEnt:id():toString())) { 
        DoorEnt:setAlpha(255)    
        DoorEnt:noCollideAll(0)
    }   
}

if(clk("CheckDiseasesUpdate")) {
    checkPlayers()
    timer("CheckDiseasesUpdate", CheckDiseasesUpdate*1000) 
}

#---------------------------------------------Handle Disconnect----------------------------------------

if(disconnectClk()){
    Player = lastDisconnectedPlayer()
    
    for(Y = 1, AuthList:count()){
        if(Player == AuthList[Y,entity]){
            hint("Authorized player disconnected!",5)
            AuthList:remove(Y)
        }
    }
}
